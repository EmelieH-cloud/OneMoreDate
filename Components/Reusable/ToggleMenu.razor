@inject NavigationManager NavigationManager

<div>
    <button @onclick="HandleModal" class="hamburger-icon">
        <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-list" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5m0-4a.5.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5" />
        </svg>
    </button>

    @if (modalShowing)
    {
        <div class="container">
            <div class="toggle-screen" @onclick="HandleScreenClick"></div>
            <div class="my-menu-modal @CurrentMenuAnimation">
                <div class="links-container">
                    <h4 class="bg-light toggle-menu-header">Menu</h4>
                    <button @onclick="OpenHowToPlayModal" class="link-border bg-light rules-menu-link">How to play</button>
                    <button @onclick="NavigateToSomething" class="link-border bg-light quit-menu-link">Quit Game</button>
                </div>
            </div>
        </div>
    }

    @if (howToPlayModalisShowing)
    {
        <HowToPlayModal CloseHowToPlayModal="CloseTheHowToPlayModal" AnimationClass="@CurrentHowToPlayAnimation" />
    }
</div>

@code {
    private bool modalShowing = false;
    private bool howToPlayModalisShowing = false;
    private string slideInLeftAnimation = "animate__animated animate__slideInLeft";
    private string slideOutLeftAnimation = "animate__animated animate__slideOutLeft";
    public string SlideInAnimation = "animate__animated animate__slideInUp";
    public string SlideOutAnimation = "animate__animated animate__slideOutDown";
    public string CurrentMenuAnimation = "";
    public string CurrentHowToPlayAnimation = "";

    private async Task CloseTheHowToPlayModal() // click-event för kryssknappen
    {
        CurrentHowToPlayAnimation = SlideOutAnimation;
        StateHasChanged();
        await Task.Delay(500); // Vänta på att animationen ska slutföras
        howToPlayModalisShowing = false;
    }

    private async Task SetMenuModalAnimation()
    {
        if (modalShowing)
        {
            CurrentMenuAnimation = slideInLeftAnimation;
            StateHasChanged();

        }
        else
        {
            CurrentMenuAnimation = slideOutLeftAnimation;
            StateHasChanged();
           
        }
    }

    private async Task SetHowToPlayModalAnimation()
    {
        if (howToPlayModalisShowing)
        {
            CurrentHowToPlayAnimation = SlideInAnimation;
            StateHasChanged();
        }
        else if (!howToPlayModalisShowing)
        {
            CurrentHowToPlayAnimation = SlideOutAnimation;
            StateHasChanged();
            await Task.Delay(500); // Vänta på att animationen ska slutföras
        }
    }

    private async Task HandleModal() // click event
    {
        if (modalShowing)
        {
            modalShowing = false;
            await SetMenuModalAnimation();
        }
        else if (!modalShowing)
        {
            modalShowing = true;
            await SetMenuModalAnimation();
        }
    }

    private void NavigateToSomething()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task OpenHowToPlayModal() // onclick-event
    {
        modalShowing = false;
        await SetMenuModalAnimation();

        howToPlayModalisShowing = true;
        await SetHowToPlayModalAnimation();
    }

    private async Task HandleScreenClick()
    {
        if (modalShowing)
        {
            modalShowing = false;
            await SetMenuModalAnimation();
        }
        else if (howToPlayModalisShowing)
        {
            howToPlayModalisShowing = false;
            await SetHowToPlayModalAnimation();
        }
    }
}
