
@using Microsoft.AspNetCore.Components
@using Components.Reusable;
@using OneMoreDate.Managers
@using OneMoreDate.Models
@using Microsoft.AspNetCore.Components.Web

@if (dropdownIsOpen)
{
    <div class="screen-area-mouseclick" @onclick="ScreenClicked"> </div>
}
<div class="ShowCards-Container rounded animate__animated animate__fadeIn">
    <div class="previous-card-container">
        @if (ActivePlayer != null)
        {
            <div class="text-container">
                <div class="background-pink">
                    <div class="d-flex justify-content-start p-1">
                        <svg xmlns="http://www.w3.org/2000/svg" @onclick="OpenMenu" fill="currentColor" class="bi bi-list hamburger-menu" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5" />
                        </svg>
                        @if (dropdownIsOpen)
                        {
                            <div class="game-menu">
                              <ul>
                                  <li>Quit Game</li>
                              </ul>
                            </div>
                        }
                    </div>
                    <h2 class="activeplayer-header text-white">@($"{ActivePlayer.Name}'s turn")</h2>
                </div>

                @if (ActivePlayer.LivesTogether)
                {
                    <h5>Relationship status: Lives together</h5>
                }
                @if (ActivePlayer.IsMarried)
                {
                    <h5>Relationship status: Married</h5>
                }

                @if (ActivePlayer.Hand == null || ActivePlayer.Hand.Count == 0)
                {
                    <div class="first-card">
                        <div class="first-card-p">
                            <p><span class="fw-bolder">@ActivePlayer.Name </span> is on the first date and meets someone who seems absolutely perfect...</p>
                        </div>
                    </div>
                }
                else
                {
                    @if (ActivePlayer.LivesTogether)
                    {
                        <p><span class="fw-bolder">@ActivePlayer.Name lives together with someone who...</span></p>
                    }
                    else
                    {
                        <p class="mt-3 mb-3"><span class="fw-bolder">@ActivePlayer.Name is dating someone who...</span></p>
                    }

                    int delayCounter = 1;
                    @foreach (PlayerCard card in ActivePlayer.Hand)
                    {
                        <div class="question-container">
                            <img src="images/heart.png" alt="heart" class="heart-image fade-in-previous @GetDelayClass(delayCounter)" />
                            <p class="fade-in-previous @GetDelayClass(delayCounter) mb-2">@card.Question</p>
                        </div>
                        delayCounter++;
                    }
                }
            </div>
        }

        <button @onclick="CloseButton"><img src="./images/pinkarrow.png" alt="btn" class="forward-btn" /></button>
    </div>
</div>

@code {
    public Player? ActivePlayer;

    [Parameter]
    public EventCallback CloseButton { get; set; }

    private bool dropdownIsOpen = false;

    private void OpenMenu()
    {
        dropdownIsOpen = true;
    }

    private void ScreenClicked()
    {
        dropdownIsOpen = false; 
    }

    private string GetDelayClass(int delayCounter)
    {
        return delayCounter switch
        {
            1 => "delay-1s",
            2 => "delay-2s",
            3 => "delay-3s",
            4 => "delay-4s",
            5 => "delay-5s",
            6 => "delay-6s",
            7 => "delay-7s",
            8 => "delay-8s",
            9 => "delay-9s",
            10 => "delay-10s",
            _ => ""
        };
    }

    protected override void OnInitialized()
    {
        ActivePlayer = PlayerManager.GetActivePlayer();
    }
}
