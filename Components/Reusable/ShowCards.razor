@using Microsoft.AspNetCore.Components
@using Components.Reusable;
@using OneMoreDate.Managers
@using OneMoreDate.Models
@using Microsoft.AspNetCore.Components.Web

<GoBackBtn BackUrl="menu" />

<div class="ShowCards-Container rounded animate__animated animate__fadeIn" @onclick="OnOutsideClickAsync">

    <div class="previous-card-container">
        @if (ActivePlayer != null)
        {
            <div class="text-container">
                <div class="background-pink">
                    <div class="d-flex justify-content-start p-1">
                        <div>
                            <Dropdown @onmouseover="MouseIn" @onmouseout="MouseOut" Color="DropdownColor.Secondary" @ref="dropdown">
                                <DropdownMenu Class="mt-4">
                                    <DropdownItem To="#" Type="DropdownItemType.Link">How To Play</DropdownItem>
                                    <DropdownItem @onclick="() => smModal.ShowAsync()" Type=" DropdownItemType.Link">Quit Game</DropdownItem>
                                </DropdownMenu>
                            </Dropdown>
                        </div>

                        @if (!dropdownIsOpen)
                        {
                            <Button @onclick="ShowAsync">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="white" class="bi bi-list hamburger-menu" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5" />
                                </svg>
                            </Button>
                        }

                        @if (dropdownIsOpen)
                        {
                            <Button @onclick="HideAsync">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="white" class="bi bi-list hamburger-menu" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5" />
                                </svg>
                            </Button>
                        }

                    </div>


                    <h2 class="activeplayer-header text-white">@($"{ActivePlayer.Name}'s turn")</h2>
                </div>


                @if (ActivePlayer.LivesTogether)
                {
                    <h5>Relationship status: Lives together</h5>
                }
                @if (ActivePlayer.IsMarried)
                {
                    <h5>Relationship status: Married</h5>
                }

                @if (ActivePlayer.Hand.Count == 0 || ActivePlayer.Hand == null)
                {
                    <div class="first-card">
                        <div class=" first-card-p">
                            <p><span class="fw-bolder">@ActivePlayer.Name </span> is on the first date and meets someone who seems absolutely perfect...</p>
                        </div>
                    </div>
                }

                @if (ActivePlayer.Hand != null && ActivePlayer.Hand.Count > 0)
                {
                    @if (ActivePlayer.LivesTogether)
                    {
                        <p><span class="fw-bolder">@ActivePlayer.Name lives together with someone who...</span></p>
                    }
                    else
                    {
                        <p class="mt-3 mb-3"><span class="fw-bolder">@ActivePlayer.Name is dating someone who...</span></p>
                    }

                    int delayCounter = 1;
                    @foreach (PlayerCard card in ActivePlayer.Hand)
                    {
                        <div class="question-container">
                            <img src="images/heart.png" alt="heart" class="heart-image fade-in-previous @GetDelayClass(delayCounter)" />
                            <p class="fade-in-previous @GetDelayClass(delayCounter) mb-2 ">@card.Question</p>
                        </div>
                        delayCounter++;

                    }
                }
            </div>
        }

        <button @onclick=CloseButton><img src="./images/pinkarrow.png" alt="btn" class="forward-btn" /></button>
    </div>

</div>
<Modal DialogCssClass="z-index-1000" @ref="smModal" UseStaticBackdrop="false" title="Quit Game" Size="ModalSize.Small">
    <BodyTemplate>
        <h3>Quit Game</h3>
        <p>Are you sure you want to quit?</p>
        <button class="bg-success text-white rounded dialog-yes-btn mt-2" @* @onclick="QuitGame" *@>Yes</button>
        <button class="bg-danger text-white rounded dialog-no-btn m2-2" @* @onclick="CancelQuitGame" *@>No</button>
    </BodyTemplate>
</Modal>


@code {
    bool IsInside;
    public Player? ActivePlayer;
    private Dropdown dropdown = default!;
    private bool dropdownIsOpen = false;
    private Modal smModal = default!;

    [Parameter]
    public EventCallback CloseButton { get; set; }

    protected override void OnInitialized()
    {
        ActivePlayer = PlayerManager.GetActivePlayer();
    }

    private async Task ShowAsync()
    {
        await dropdown.ShowAsync();
        dropdownIsOpen = true;

    }


    private async Task HideAsync()
    {
        await dropdown.HideAsync();
        dropdownIsOpen = false;
    }

    private string GetDelayClass(int delayCounter)
    {
        return delayCounter switch
        {
            1 => "delay-1s",
            2 => "delay-2s",
            3 => "delay-3s",
            4 => "delay-4s",
            5 => "delay-5s",
            6 => "delay-6s",
            7 => "delay-7s",
            8 => "delay-8s",
            9 => "delay-9s",
            10 => "delay-10s",
            _ => ""
        };
    }


    private void MouseIn()
    {
        IsInside = true;
    }
    private void MouseOut()
    {
        IsInside = false;
    }

    private async Task OnOutsideClickAsync()
    {
        if (!IsInside && dropdownIsOpen)
        {
            await HideAsync();
        }
    }

}