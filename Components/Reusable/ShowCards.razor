@using Microsoft.AspNetCore.Components
@using Components.Reusable;
@using OneMoreDate.Managers
@using OneMoreDate.Models
@using Microsoft.AspNetCore.Components.Web



<div class="ShowCards-Container rounded animate__animated animate__fadeIn">

    <div class="toggle-menu-container">
        <ToggleMenu />
    </div>
   
    <div class="previous-card-container">
        @if (ActivePlayer != null)
        {
            <div class="text-container">
                <div class="background-pink">
                    <div class="d-flex justify-content-start p-1">
                        <div>
                          
                        </div>


                    </div>


                    <h2 class="activeplayer-header">@($"{ActivePlayer.Name}'s turn")</h2>
                </div>


                @if (ActivePlayer.LivesTogether)
                {
                    <h5>Relationship status: Lives together</h5>
                }
                @if (ActivePlayer.IsMarried)
                {
                    <h5>Relationship status: Married</h5>
                }

                @if (ActivePlayer.Hand.Count == 0 || ActivePlayer.Hand == null)
                {
                    <div class="first-card">
                        <div class=" first-card-p">
                            <p><span class="fw-bolder">@ActivePlayer.Name </span> is on the first date and meets someone who seems absolutely perfect...</p>
                        </div>
                    </div>
                }

                @if (ActivePlayer.Hand != null && ActivePlayer.Hand.Count > 0)
                {
                    @if (ActivePlayer.LivesTogether)
                    {
                        <p><span class="fw-bolder">@ActivePlayer.Name lives together with someone who...</span></p>
                    }
                    else
                    {
                        <p class="mt-3 mb-3"><span class="fw-bolder">@ActivePlayer.Name is dating someone who...</span></p>
                    }

                    int delayCounter = 1;
                    @foreach (PlayerCard card in ActivePlayer.Hand)
                    {
                        <div class="question-container">
                            <img src="images/heart.png" alt="heart" class="heart-image fade-in-previous @GetDelayClass(delayCounter)" />
                            <p class="fade-in-previous @GetDelayClass(delayCounter) mb-2 ">@card.Question</p>
                        </div>
                        delayCounter++;

                    }
                }
            </div>
        }

        <button @onclick=CloseButton><img src="./images/continue.png" alt="btn" class="forward-btn animate__animated animate__heartBeat animate__infinite infinite" /></button>
  
    </div>

</div>



@code {

    public Player? ActivePlayer;


    [Parameter]
    public EventCallback CloseButton { get; set; }

    protected override void OnInitialized()
    {
        ActivePlayer = PlayerManager.GetActivePlayer();
    }

    private string GetDelayClass(int delayCounter)
    {
        return delayCounter switch
        {
            1 => "delay-1s",
            2 => "delay-2s",
            3 => "delay-3s",
            4 => "delay-4s",
            5 => "delay-5s",
            6 => "delay-6s",
            7 => "delay-7s",
            8 => "delay-8s",
            9 => "delay-9s",
            10 => "delay-10s",
            _ => ""
        };
    }


   

}