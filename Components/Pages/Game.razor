@page "/game"
@using OneMoreDate.Managers;
@using OneMoreDate.Models;
@using OneMoreDate.Components.Reusable;
@inject NavigationManager Navigation

@if (ShowHeart)
{
    
    <div class="yes-image animate__animated animate__fadeIn">
        <img src="images/heartbeat.png" alt="yesimg" class="animate__animated animate__zoomIn" />

    </div>
}

else if (IsGettingMarried)
{
     <div class="overlay-background">
    <Confetti/>
    <div class="yes-image animate__animated animate__fadeIn">
       
        <img src="images/newlymarried.png" alt="marriage" class="animate__animated animate__zoomIn" />
            <h1 class="marriage-message-header animate__animated animate__zoomIn">Congratulations! <br /><br /> @ActivePlayer.Name just got married and will live happily ever after! <br /> <br /> Your search for true love has finally come to an end.</h1>
            <img src="./images/continue.png" alt="btn" class="move-in-forward-button animate__animated animate__heartBeat animate__infinite infinite" @onclick="GoForwardMovingIn" />
    </div>
    </div>
  
}

else if (IsMovingInTogether)
{
    <div class="overlay-background">
    <div class="yes-image animate__animated animate__fadeIn">
        <h1 class="move-in-message-header animate__animated animate__zoomIn"> Congratulations! <br/> <br/> You just moved in together!</h1>
        <img src="images/house.png" alt="houseimg" class="animate__animated animate__zoomIn" />
        


        <img src="./images/continue.png" alt="btn" class="move-in-forward-button animate__animated animate__heartBeat animate__infinite infinite" @onclick="GoForwardMovingIn"/>
           
    </div>
    </div>
}
<div class="animate__animated animate__fadeIn rounded text-center">
    
    @if (ShowCards)
    {
        <ShowCards CloseButton="CloseBtn"/>
    }

else if (StandardCardIsShowing)
{
   

       <div class="gamepage-outer-container ">


           <div class="card-btns-container">


                <StandardCard Question="@currentQuestion" Animation="@animationClass"  GoBackShowCards = "GoBackShowCards" />


            <div class="game-btns-container ">
                <button @onclick="DeletePlayerHand" class=" no-btn bg-light border border-1">
                    <svg xmlns="http://www.w3.org/2000/svg" width="42" height="42" fill="red" class="bi bi-x" viewBox="0 0 16 16">
                        <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708" />
                    </svg>
                </button>
                    <button @onclick="SaveCardOnPlayer" class="m-1 yes-btn bg-light border border-1" disabled="@(!YesButtonIsEnabled)">
                    <svg xmlns="http://www.w3.org/2000/svg" width="42" height="42" fill="green" class="bi bi-check" viewBox="0 0 16 16">
                        <path d="M10.97 4.97a.75.75 0 0 1 1.07 1.05l-3.99 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425z" />
                    </svg>
                </button>

            </div>
            </div>

        </div>
       
     
       
      
}


 
</div>



@code {
    private bool IsGettingMarried = false; 
    private bool YesButtonIsEnabled;
    private bool StandardCardIsShowing; 
    private string animationClass = "";
    private string dateNumber;
    private int lastQuestionCounter = 0;
    private int ActivePlayerIndex = 0;
    private int ActiveCardIndex = 0;
    private bool IsStarterDeck;
    private Player ActivePlayer = new Player(); 
    private List<Player> players = new List<Player>(); 
    private StarterDeck ActiveStarterDeck = new StarterDeck(); 
    private PartyDeck ActivePartyDeck = new PartyDeck();
    private string deckName;
    private string currentQuestion;
    private PlayerCard ActiveCard = new PlayerCard(); 
    private bool ShowCards = false; 
    private bool ShowHeart = false;
    private bool yesBtnIsDisabled = false; 

    private bool IsMovingInTogether = false; 



    private async Task GoForwardMovingIn()
    {
        IsMovingInTogether = false;
        IsGettingMarried = false;

        currentQuestion = "";
        StateHasChanged();

        SwitchPlayer();
    }



    private async Task GoBackShowCards()
    {
        currentQuestion = "";
        animationClass = "animate__animated animate__slideOutLeft";
        StateHasChanged();
        await Task.Delay(1000);
        ShowCards = true;
        StandardCardIsShowing = false;
        animationClass = "";
    }



    protected override void OnInitialized()
    {
        players = PlayerManager.Players;
        ConvertActiveDeck();
        InitializeActiveCard();
        InitializeActivePlayer();
        CalculateActivePlayerDate();


    }

    public void ConvertActiveDeck()
    {
        if (GameManager.ActiveDeck is StarterDeck starterDeck)
        {
            deckName = starterDeck.Name;
            ActiveStarterDeck = starterDeck;
            IsStarterDeck = true;
        }
        else if (GameManager.ActiveDeck is PartyDeck partyDeck)
        {
            deckName = partyDeck.Name;
            ActivePartyDeck = partyDeck;
        }
    }

    private async Task DeletePlayerHand()
    {
        animationClass = "animate__animated animate__rotateOutUpLeft";
        currentQuestion = "";
        StateHasChanged();
        await Task.Delay(1000); 
        ActivePlayer.Hand.Clear();
        SwitchPlayer();
        animationClass = ""; 
    }

    private async void SaveCardOnPlayer()
    {

        YesButtonIsEnabled = false;

        ActivePlayer.Hand.Add(ActiveCard);
        if (ActivePlayer.Hand.Count==5)
        {
            IsMovingInTogether = true;
            StateHasChanged();

        }

        else if (ActivePlayer.Hand.Count==6)
        {
            IsGettingMarried = true;
            ActivePlayer.Hand.Clear();
            StateHasChanged();
        }


        else
        {
            ShowHeart = true;

            StateHasChanged();
            await Task.Delay(1500);



            animationClass = "animate__animated animate__slideOutRight";
            currentQuestion = "";
            ShowHeart = false;
            StateHasChanged();
            await Task.Delay(1500);

            SwitchPlayer();
            StandardCardIsShowing = false;
        }





    }


    private void SwitchPlayer()
    {

        ActivePlayerIndex = (ActivePlayerIndex + 1) % players.Count;


        ActiveCardIndex = (ActiveCardIndex + 1) % (IsStarterDeck ? ActiveStarterDeck.Cards.Count : ActivePartyDeck.Cards.Count);

        InitializeActivePlayer();
        InitializeActiveCard();
        lastQuestionCounter = 0;
        CalculateActivePlayerDate();

    }

    private void CloseBtn()
    {

        YesButtonIsEnabled = true;
        ShowCards = false;
        StandardCardIsShowing = true;
     
        InitializeActiveCard();

    }


    private void InitializeActivePlayer()
    {

        // Byt spelare 
        ActivePlayer = players[ActivePlayerIndex];
        PlayerManager.SetActivePlayer(ActivePlayer);

            ShowCards = true; 
       

    }

    private void InitializeActiveCard()
    {
        if (IsStarterDeck)
        {
            ActiveCard = ActiveStarterDeck.Cards[ActiveCardIndex];
        }
        else
        {
            ActiveCard = ActivePartyDeck.Cards[ActiveCardIndex];
        }
        currentQuestion = ActiveCard.Question;
        FlipCard();

    }

    private async void FlipCard()
    {
    
        animationClass = "animate__animated animate__fadeIn";
        StateHasChanged();
        await Task.Delay(1000); // Vänta på att animeringen ska slutföras
        animationClass = ""; // Återställ klassnamnet efter animeringen
        StateHasChanged();
    }
    

    private void CalculateActivePlayerDate()
    {
        switch (ActivePlayer.Hand.Count)
        {
            case 1: dateNumber = "second"; break;
            case 2: dateNumber = "third"; break;
            case 3: dateNumber = "fourth"; break;
            case 4: dateNumber = "fifth"; break;
            case 5: dateNumber = "sixth"; break;
            case 6: dateNumber = "seventh"; break;
            case 7: dateNumber = "eighth"; break;
            case 8: dateNumber = "ninth"; break;
            case 9: dateNumber = "tenth"; break;
            default: dateNumber = "first"; break;
        }
    }
}
