@page "/game"
@using OneMoreDate.Managers;
@using OneMoreDate.Models;
@using OneMoreDate.Components.Reusable;
@inject NavigationManager Navigation

<div class="showCards-Container rounded @(isFadingOut ? "animate__animated animate__slideOutRight" : "")" @ref="showCardsContainer">
    <div class="toggle-menu-container">
        <ToggleMenu />
    </div>

    <div class="stormy">
        <ul>
            <li> <img src="images/heart1.png" alt="heart1" class="falling-heart"/> </li>
            <li> <img src="images/heart3.png" alt="heart3" class="falling-heart" /> </li>
            <li> <img src="images/heart1.png" alt="heart1" class="falling-heart" /> </li>
            <li> <img src="images/heart3.png" alt="heart1" class="falling-heart" /></li>
            <li> <img src="images/heart3.png" alt="heart3" class="falling-heart" /></li>
            <li> <img src="images/heart1.png" alt="heart1" class="falling-heart" /></li>
        </ul>
    </div>
    <div class="previous-cards-container">
        @if (ActivePlayer != null)
        {
            <h2 class="activeplayer-header">@($"{ActivePlayer.Name}'s turn")</h2>

            @if (ActivePlayer.Hand == null || ActivePlayer.Hand.Count == 0)
            {
                <div class="first-card">
                    <div class="first-card-p animate__animated animate__zoomIn">
                        <p class="animate__animated animate__fadeIn">
                            <span class="fw-bolder">@ActivePlayer.Name</span> is on the date and meets someone who seems absolutely perfect...
                        </p>
                        <p class="but-during animate__animated animate__fadeIn animate__delay-2s animate_slower">
                            <br />But during the date it turns out that he/she...
                        </p>

                    </div>
                   
                </div>
            }

            @if (ActivePlayer.Hand != null && ActivePlayer.Hand.Count > 0)
            {
                <p class="mt-3 mb-3"><span class="fw-bolder">@ActivePlayer.Name is dating someone who...</span></p>
                <div class="previous-questions-area"> </div>
                @foreach (PlayerCard card in ActivePlayer.Hand)
                {
                    <div class="previous-question">
                        <img src="images/heart.png" alt="heart" class="heart-image" />
                        <p class="game-question-text"> @card.Question.ToString() </p>
                    </div>
                }
            }
            <div class="read-card-btn-container @(IsFirstCard ? "first-card-position" : "not-first-card-position")">
                <button @onclick="ReadCard" class="button-29 read-card-btn animate__animated animate__bounce animate__infinite	infinite">READ CARD</button>
            </div>

        }
        else
        {
            <p>Active player is null</p>
        }
    </div>
</div>

@if (ShowHeart)
{
    <div class="yes-image animate__animated animate__fadeIn">
        <img src="images/heartbeat.png" alt="yesimg" class="animate__animated animate__zoomIn" />
    </div>
}
else if (IsGettingMarried)
{
    <div class="overlay-background">
        <Confetti />
        <div class="yes-image animate__animated animate__fadeIn">
            <img src="images/newlymarried.png" alt="marriage" class="animate__animated animate__zoomIn" />
            <h1 class="marriage-message-header animate__animated animate__zoomIn">
                Congratulations! <br /><br /> @ActivePlayer.Name just got married and will live happily ever after! <br /> <br /> Your search for true love has finally come to an end.
            </h1>
            <img src="./images/continue.png" alt="btn" class="move-in-forward-button animate__animated animate__heartBeat animate__infinite infinite" @onclick="GoForwardMovingIn" />
        </div>
    </div>
}
else if (IsMovingInTogether)
{
    <div class="overlay-background">
        <div class="yes-image animate__animated animate__fadeIn">
            <h1 class="move-in-message-header animate__animated animate__zoomIn">Congratulations! <br /> <br /> You just moved in together!</h1>
            <img src="images/house.png" alt="houseimg" class="animate__animated animate__zoomIn" />
            <img src="./images/continue.png" alt="btn" class="move-in-forward-button animate__animated animate__heartBeat animate__infinite infinite" @onclick="GoForwardMovingIn" />
        </div>
    </div>
}

<div class="animate__animated animate__fadeIn rounded text-center" />

@if (StandardCardIsShowing)
{
    <div class="gamepage-outer-container">
        <StandardCard Question="@currentQuestion" Animation="@animationClass" />
        <div class="game-btns-container">
            <button @onclick="DeletePlayerHand" class="no-btn bg-light border border-1">
                <svg xmlns="http://www.w3.org/2000/svg" width="42" height="42" fill="red" class="bi bi-x" viewBox="0 0 16 16">
                    <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708" />
                </svg>
            </button>
            <button @onclick="SaveCardOnPlayer" class="yes-btn bg-light border border-1" disabled="@(!YesButtonIsEnabled)">
                <svg xmlns="http://www.w3.org/2000/svg" width="42" height="42" fill="green" class="bi bi-check" viewBox="0 0 16 16">
                    <path d="M10.97 4.97a.75.75 0 0 1 1.07 1.05l-3.99 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425z" />
                </svg>
            </button>
        </div>
    </div>
}

@code {
    /* ----------- bool variables --------------*/
    private bool IsGettingMarried = false;
    private bool IsFirstCard = true;
    private bool YesButtonIsEnabled;
    private bool StandardCardIsShowing;
    private bool ShowHeart = false;
    private bool yesBtnIsDisabled = false;
    private bool IsMovingInTogether = false;
    private bool isFadingOut = false;

    /* -------Object variables ------------- */
    private Player ActivePlayer = new Player();
    private List<Player> players = new List<Player>();
    private PlayerCard ActiveCard = new PlayerCard();
    private Deck ActiveDeck = new();
    private ElementReference showCardsContainer;

    /* ----------String variables ------------*/
    private string animationClass = "";
    private string currentQuestion = "";

    /* ----------Number variables ------------*/
    private int lastQuestionCounter = 0;
    private int ActivePlayerIndex = 0;
    private int ActiveCardIndex = 0;


    protected override void OnInitialized()
    {
        // Save all players in the 'players' array 
        players = PlayerManager.Players;

        if (players.Count > 0)
        {
            ActivePlayer = players[0];
        }

        // Check and set deck type
        ActiveDeck = GameManager.ActiveDeck;
        // Shuffle the deck
        ActiveDeck.Shuffle();
        // Initialize ActiveCard 
        ActiveCardIndex = 0;
        ActiveCard = ActiveDeck.Cards[ActiveCardIndex];
    }

    private void ReadCard()
    {
        // Get the new question 
        SetCurrentQuestion();
        animationClass = "animate__animated animate__slideIn";
        StandardCardIsShowing = true;
        YesButtonIsEnabled = true;
        StateHasChanged();
    }


    public void SetCurrentQuestion()
    {
        currentQuestion = ActiveCard.Question;
    }

    private async Task GoBackShowCards()
    {
        currentQuestion = "";
        animationClass = "animate__animated animate__slideOutLeft";
        StateHasChanged();
        await Task.Delay(1000);
        StandardCardIsShowing = false;
        animationClass = "";
    }

    private void GoForwardMovingIn()
    {
        IsMovingInTogether = false;
        IsGettingMarried = false;
        currentQuestion = "";
        StateHasChanged();
        SwitchPlayer();
    }

    private async Task DeletePlayerHand()
    {
        // Disable the yes-button
        YesButtonIsEnabled = false;
        // Update the card-animation
        animationClass = "animate__animated animate__rotateOutUpLeft";
        currentQuestion = "";
        StateHasChanged();
        // Wait for animation to finish
        await Task.Delay(1000);
        // Hide the card
        StandardCardIsShowing = false;
        ActivePlayer.Hand.Clear();
        SwitchPlayer();
        animationClass = "";
    }

    private async Task SaveCardOnPlayer()
    {
        // Disable the yes button
        YesButtonIsEnabled = false;

        // Add the card to the player
        ActivePlayer.Hand.Add(ActiveCard);

        // Check if this is the players fifth card 
        if (ActivePlayer.Hand.Count == 5)
        {
            IsMovingInTogether = true;
            StateHasChanged();
        }

        // Check if this is the players sixth card 
        else if (ActivePlayer.Hand.Count == 6)
        {
            IsGettingMarried = true;
            ActivePlayer.Hand.Clear();
            StateHasChanged();
        }
        else
        {

            // Show the yes-animation
            ShowHeart = true;
            StateHasChanged();
            // wait 1.5 second
            await Task.Delay(1500);
            // Update the card's animation class
            animationClass = "animate__animated animate__slideOutRight";
            currentQuestion = "";
            // Hide the yes-animation
            ShowHeart = false;
            StateHasChanged();
            await Task.Delay(1500);
            SwitchPlayer();
            StandardCardIsShowing = false;
        }
    }

    private void SwitchPlayer()
    {
        // Get the ActivePlayerIndex
        ActivePlayerIndex = (ActivePlayerIndex + 1) % players.Count;
        // Get the ActivePlayer
        ActivePlayer = players[ActivePlayerIndex];
        // Get the ActiveCardIndex
        ActiveCardIndex = (ActiveCardIndex + 1);
        // Get the ActiveCard 
        ActiveCard = ActiveDeck.Cards[ActiveCardIndex];

        // Check if the player has any cards: 
        ActivePlayerCardCount();
        // Set the new question 
        SetCurrentQuestion();
    }

    private void ActivePlayerCardCount()
    {
        if (ActivePlayer.Hand.Count > 0)
        {
            IsFirstCard = false;
        }

        else if (ActivePlayer.Hand.Count == 0)
        {
            IsFirstCard = true;
        }
    }

    private void CloseBtn()
    {
        YesButtonIsEnabled = true;
        StandardCardIsShowing = true;
    }

 
}
