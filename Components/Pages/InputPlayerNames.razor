@page "/inputPlayerNames"
@using OneMoreDate.Components.Reusable
@using OneMoreDate.Managers
@using OneMoreDate.Models
@inject NavigationManager navigationManager

<style>
    .broken-bg
    {
        position: absolute;
        z-index: 1;
        top: 30%;
        margin-left: 5%;
        opacity: .4;
        
   
     
    }
</style>


<div class="outer-container-inputplayernames ">

<div class="background-image-container">
        <GoBackBtn BackUrl="menu" /> 
        

            <div class="added-names-container">
                @foreach (var name in Names)
                {
                    <div class="name-container  rounded">

                        <div class="inner-name-container  animate__animated animate__slideInLeft">
                            <p class=" name-p ">
                                @name
                            </p>
                        </div>

                        <div class="animate__animated animate__fadeIn  pink-bg">
                            <button class="remove-btn" @onclick="() => RemovePlayer(name)">
                                <svg xmlns="http://www.w3.org/2000/svg"  fill="white"  class="bi bi-dash bg-svg-pink " viewBox="0 0 16 16">
                                    <path d="M4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8" />
                                </svg>
                            </button>
                        </div>
                    </div>
                }
            </div>
         
            <div class="input-container rounded animate__animated animate__slideInLeft ">
                    <input @bind="InputValue" placeholder="Name" class="name-input form-control custom-color" disabled="@inputIsDone" @oninput="UpdateInputValue" @ref=" playerNameInput" @onkeydown="HandleKeyPress"  />
            <button @onclick="AddPlayers" class="@(string.IsNullOrWhiteSpace(InputValue) ? "add-btn-disabled" : "add-btn")">
                        <svg xmlns="http://www.w3.org/2000/svg"  fill="white" class=" add-btn-svg bi bi-plus" viewBox="0 0 16 16">
                            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
                        </svg>
                    </button>
            <button @onclick="AddActivePlayers" class="@(disableDoneBtn ? "done-btn-disabled" : "done-btn")" disabled="@disableDoneBtn">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="white" class="bi bi-arrow-right done-btn-svg" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8" />
                        </svg>
                    </button>
                </div>

        </div>
</div>


@code {
    private List<Player>? players = new List<Player>();

    private bool inputIsDone = false;
    private bool disableDoneBtn = true;
    public string InputValue { get; set; }
    public List<string> Names { get; set; } = new List<string>();
    private ElementReference playerNameInput;

    private void AddPlayers()
    {

        if (!string.IsNullOrEmpty(InputValue) && Names.Count<=9)
        {
            Names.Add(InputValue);
            InputValue = "";
        }
        // Uppdatera disableDoneBtn baserat på antalet namn
        disableDoneBtn = Names.Count == 0;
        if (Names.Count >= 1)
        {
            disableDoneBtn = false;
        }

        if (Names.Count==10)
        {
            InputValue = null;
            inputIsDone = true;
            StateHasChanged();
        }

        StateHasChanged();
        FocusInputAsync();
        // Anropa StateHasChanged för att uppdatera renderingen

    }

    private void RemovePlayer(string name)
    {
        Names.Remove(name);

        // Uppdatera disableDoneBtn baserat på antalet namn
        disableDoneBtn = Names.Count == 0;

        if(Names.Count<10)
        {
            inputIsDone = false; 
        }

        StateHasChanged();
    }

    private void AddActivePlayers()
    {
        PlayerManager.Players.Clear();
        PlayerManager.AddActivePlayers(Names);
        Names.Clear();
        navigationManager.NavigateTo("/deck");
    }

    protected override void OnInitialized()
    {
        Names.Clear();
        players = PlayerManager.Players;

        if (players != null)
        {
            foreach (Player p in players)
            {
                Names.Add(p.Name);
            }
        }

        // Sätt disableDoneBtn baserat på om inga spelare är tillagda
        disableDoneBtn = Names.Count == 0;

        // Så att done-button fungerar även om man kommer tillbaka till sidan.
        if (players != null && players.Count >= 1)
        {
            disableDoneBtn = false;
        }
    }


    private async Task FocusInputAsync()
    {
        await Task.Delay(1); // Vänta en kort stund för att säkerställa att rendering är klar
        await playerNameInput.FocusAsync();
    }


    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            AddPlayers();
        }
    }

    private void UpdateInputValue(ChangeEventArgs e)
    {
        InputValue = e.Value?.ToString();
      
    }

}
