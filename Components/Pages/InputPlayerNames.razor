@page "/inputPlayerNames"
@using OneMoreDate.Components.Reusable
@using OneMoreDate.Managers
@using OneMoreDate.Models
@inject NavigationManager navigationManager

<style>
   
    .white-modal
    {
        display: flex;
        justify-content: center;
        width: 90vw;
        height: 80vh;
        background-color: rgba(247, 149, 209, 0.9);
    }

    .custom-color
    {
        border-color: black;
    }

    .my-border
    {
        border: 1px solid black;
       
    }
</style>




<GoBackBtn BackUrl="menu" />
<div class="outer-playernames-container ">
    <div class="white-modal rounded animate__animated animate__slideInLeft ">
    <div class="modal-playernames-bg p-3">
            <h2 class=" player-names-header  ">Player names:</h2>
        <div class="input-group mb-4 ">
            <input @bind="InputValue" placeholder="Name" class="form-control custom-color" disabled="@inputIsDone" @ref="playerNameInput" />
            <button @onclick="AddPlayers" class="button-29 fw-bold small custom-btn-width custom-btn-height">+</button>
        </div>
        @foreach (var name in Names)
        {
            <div class="name-container bg-light my-border rounded">
                <p class="p-2 name-p small">
                    @name
                </p>
                <button class="fw-bolder fs-1 custom-btn-width button-29 custom-btn-height" @onclick="() => RemovePlayer(name)">-</button>
            </div>
        }

        <div class=" d-flex vw-100 mt-4 justify-content-center align-items-center">
        <button @onclick="AddActivePlayers" class="button-29 done-btn" disabled="@disableDoneBtn">Done</button>
        </div>
    </div>
    </div>
</div>

@code {
    private List<Player>? players = new List<Player>();

    private bool inputIsDone = false;
    private bool disableDoneBtn = true;
    public string InputValue { get; set; }
    public List<string> Names { get; set; } = new List<string>();
    private ElementReference playerNameInput;

    private void AddPlayers()
    {

        if (!string.IsNullOrEmpty(InputValue))
        {
            Names.Add(InputValue);
            InputValue = "";

        }

        if (Names.Count>=1)
        {
            disableDoneBtn = false;
        }
        if(PlayerManager.Players.Count >=10)
        {
            inputIsDone = true;
            StateHasChanged();

        }

        else
        {
            // Sätt fokus tillbaka till input-elementet efter att en spelare har lagts till
            _ = FocusInputAsync();
        }


    }

    private void RemovePlayer(string name)
    {
        Names.Remove(name);
        if (Names.Count ==10)
        {
            inputIsDone = false;
            disableDoneBtn = true;
        }
        StateHasChanged();
        // Sätt fokus tillbaka till input-elementet efter att en spelare har tagits bort
        _ = FocusInputAsync();
    }

    private void AddActivePlayers()
    {
        PlayerManager.Players.Clear();
        PlayerManager.AddActivePlayers(Names);
        Names.Clear();
        navigationManager.NavigateTo("/deck");
    }

    protected override void OnInitialized()
    {


        Names.Clear();
        players = PlayerManager.Players;
        if (players!= null)
        {
            foreach (Player p in players)
            {
                Names.Add(p.Name);
            }
        }

        // Så att done-button fungerar även om man kommer tillbaka till sidan.
        if (players!= null && players.Count>=1)
        {
            disableDoneBtn = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Sätt fokus på input-elementet när komponenten har renderats för första gången
            await FocusInputAsync();
        }
    }

    private async Task FocusInputAsync()
    {
        await Task.Delay(1); // Vänta en kort stund för att säkerställa att rendering är klar
        await playerNameInput.FocusAsync();
    }
}
