@page "/inputPlayerNames"
@using OneMoreDate.Components.Reusable
@using OneMoreDate.Managers
@using OneMoreDate.Models
@inject NavigationManager navigationManager

<style>
   
    .custom-color
    {
        border-color: black;
    }

    .input-container {
        width: 100vw;
        display: flex;
        padding: 1%; 
        background-color: gray;
        justify-content: space-between;
    }

    

    .player-names-header 
    {

        color: black;
        position: absolute;
        height: 100px;
        width: 100%;
        top: 1%;
        background-color: white;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .name-container {
        display: flex;
        width: 80%;
        height: 8%;
        justify-content: space-between;
        align-items: center;
        margin: 0 auto;
        margin-top: 1%; 
    
    }

    .done-btn {

        color: white;
        width: 34px;
        background-image: radial-gradient(100% 100% at 100% 0, #FF6FCF 0, #FF1DA5 100%);
    }

    .name-p {
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        margin: 0;
        border-radius: 20px; 
        color: white;
        background-image: radial-gradient(100% 100% at 100% 0, #FF6FCF 0, #FF1DA5 100%);
    }

    .add-btn
    {
        margin-right: 1%; 
        color: white;
        width: 34px;
        background-image: radial-gradient(100% 100% at 100% 0, #FF6FCF 0, #FF1DA5 100%);
    }

    .remove-btn
    {
        width: 34px;
        height: 34px;
        border-radius: 10px;
        color: white;
        background-image: radial-gradient(100% 100% at 100% 0, #FF6FCF 0, #FF1DA5 100%);
        display: flex;
        justify-content: center;
        align-items: center;

    }


    .background-image-container 
    {
        height: 100%;
        width: 100vw;
        background-size: 100%;
        background-image: url(../images/background-pattern.png);
        background-repeat: repeat;
        display: flex;
        align-items: end

    }

    .outer-container-inputplayernames
    {
        width: 100vw;
        height: 100vh;
        background-color: white;
    }


    .added-names-container
    {
        height: 80%; 
        width: 100%; 
        position: absolute;

    }

    .inner-name-container
    {
        width: 85%; 
      
    }

    .names-header
    {
        border-bottom: 1px solid black;
        padding: 1%; 
    }

    
</style>



<div class="outer-container-inputplayernames">
<GoBackBtn BackUrl="menu" />
    <div class="player-names-header">

        <h1 class="text-center mt-4 display-2 names-header">PLAYER NAMES</h1>

    </div>
<div class="background-image-container">

        <div class="added-names-container">
        @foreach (var name in Names)
        {
            <div class="name-container bg-light rounded">

                    <div class="inner-name-container animate__animated animate__slideInLeft">
                <p class="p-2 name-p small">
                    @name
                </p>
                </div>

                    <div class="animate__animated animate__fadeIn">
                        <button class="remove-btn" @onclick="() => RemovePlayer(name)">
                           -
                        </button>
                </div>
            </div>
        }
        </div>
    <div class="rounded animate__animated animate__slideInLeft ">

      
        <div class="input-container ">
            <input @bind="InputValue" placeholder="Name" class="name-input form-control custom-color" disabled="@inputIsDone" @ref="playerNameInput" />
            <button @onclick="AddPlayers" class="add-btn">+</button>
                <button @onclick="AddActivePlayers" class="done-btn" disabled="@disableDoneBtn">></button>
        </div>
      

    </div>
</div>
</div>

@code {
    private List<Player>? players = new List<Player>();

    private bool inputIsDone = false;
    private bool disableDoneBtn = true;
    public string InputValue { get; set; }
    public List<string> Names { get; set; } = new List<string>();
    private ElementReference playerNameInput;

    private void AddPlayers()
    {

        if (!string.IsNullOrEmpty(InputValue))
        {
            Names.Add(InputValue);
            InputValue = "";

        }

        if (Names.Count>=1)
        {
            disableDoneBtn = false;
        }
        if(PlayerManager.Players.Count >=10)
        {
            inputIsDone = true;
            StateHasChanged();

        }

        else
        {
            // Sätt fokus tillbaka till input-elementet efter att en spelare har lagts till
            _ = FocusInputAsync();
        }


    }

    private void RemovePlayer(string name)
    {
        Names.Remove(name);
        if (Names.Count ==10)
        {
            inputIsDone = false;
            disableDoneBtn = true;
        }
        StateHasChanged();
        // Sätt fokus tillbaka till input-elementet efter att en spelare har tagits bort
        _ = FocusInputAsync();
    }

    private void AddActivePlayers()
    {
        PlayerManager.Players.Clear();
        PlayerManager.AddActivePlayers(Names);
        Names.Clear();
        navigationManager.NavigateTo("/deck");
    }

    protected override void OnInitialized()
    {


        Names.Clear();
        players = PlayerManager.Players;
        if (players!= null)
        {
            foreach (Player p in players)
            {
                Names.Add(p.Name);
            }
        }

        // Så att done-button fungerar även om man kommer tillbaka till sidan.
        if (players!= null && players.Count>=1)
        {
            disableDoneBtn = false;
        }
    }


    private async Task FocusInputAsync()
    {
        await Task.Delay(1); // Vänta en kort stund för att säkerställa att rendering är klar
        await playerNameInput.FocusAsync();
    }
}
