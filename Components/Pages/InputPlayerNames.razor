@page "/inputPlayerNames"
@using OneMoreDate.Components.Reusable
@using OneMoreDate.Managers
@using OneMoreDate.Models


@inject NavigationManager Navigation

<GoBackBtn BackUrl="" />

<GoForwardBtn ForwardUrl="deck" />

<div class="inputPlayerNames-outer-container">





    <div class="logo-bg">
        <img src="images/pinksky.png" alt="sky" class="logo-img animate__animated animate__fadeIn" />
    </div>

    <div class="clouds-bg">
    <img src="images/cloud1.png" alt="cloud1" class="cloud1-img animate__animated animate__slideInLeft"/>
    <img src="images/cloud2.png" alt="cloud2" class="cloud2-img animate__animated animate__slideInRight" />
    <img src="images/cloud3.png" alt="cloud3" class="cloud3-img animate__animated animate__slideInRight" />
    <img src="images/cloud1.png" alt="cloud4" class="cloud4-img animate__animated animate__slideInRight" />
    <img src="images/cloud1.png" alt="cloud5" class="cloud5-img animate__animated animate__slideInLeft" />
    <img src="images/cloud1.png" alt="cloud6" class="cloud6-img animate__animated animate__slideInLeft" />
    <img src="images/cloud1.png" alt="cloud7" class="cloud7-img animate__animated animate__slideInRight" />
    <img src="images/cloud3.png" alt="cloud8" class="cloud8-img animate__animated animate__slideInRight" />
    <img src="images/cloud2.png" alt="cloud9" class="cloud9-img animate__animated animate__slideInRight" />
    </div>
   
    <div class="couple-kiss-bg">
        <img src="images/kiss.png" alt="kissing-couple" class="kiss-img animate__animated animate__fadeInUp" />
        
    </div>




    <div class="outer-input-container animate__animated animate__slideInDown">

        <div class="playernames-header-container">
            <h1 class="players-header">Add players </h1>
        </div>
     
        <div class="animate__animated animate__fadeIn">
            <div class="input-container ">
               
                <input @bind="InputValue" placeholder="Player name" class="name-input form-control custom-color" disabled="@inputIsDone" @oninput="UpdateInputValue" @ref=" playerNameInput" @onkeydown="HandleKeyPress" />

                <button @onclick="AddPlayers" class="@(string.IsNullOrWhiteSpace(InputValue) ? "add-btn-disabled" : "add-btn")">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-plus add-btn-svg" viewBox="0 0 16 16">
                        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
                    </svg>
                </button>

            </div>
          
        </div>
    </div>
   
 


    <div class="added-names-container">
        @foreach (var name in Names)
        {

            <div class="inner-name-container animate__animated animate__slideInLeft">
                <p class=" name-p">
                    @name
                </p>
                <div class="animate__animated animate__fadeIn">
      
                    <button class="remove-btn" @onclick="() => RemovePlayer(name)">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="white" class="bi bi-dash bg-svg-pink remove-btn-svg " viewBox="0 0 16 16">
                            <path d="M4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8" />
                        </svg>
                    </button>
                   
                </div>
            </div>
        }
        <div class="done-btn-container">
            <button @onclick="AddActivePlayers" class="@(disableDoneBtn ? "done-btn-disabled" : "done-btn")" disabled="@disableDoneBtn">
               Continue playing
            </button>
        </div>
      
    </div>

  


  

</div>



@code {
    private List<Player>? players = new List<Player>();

    private bool inputIsDone = false;
    private bool disableDoneBtn = true;
    public string InputValue { get; set; }
    public List<string> Names { get; set; } = new List<string>();
    private ElementReference playerNameInput;


    private void GoForward()
    {
        Navigation.NavigateTo($"/deck");
    }

    private void AddPlayers()
    {

        if (!string.IsNullOrEmpty(InputValue) && Names.Count<=9)
        {

            Names.Insert(0, InputValue);
            InputValue = "";
        }
        // Uppdatera disableDoneBtn baserat på antalet namn
        disableDoneBtn = Names.Count == 0;
        if (Names.Count >= 1)
        {
            disableDoneBtn = false;
        }

        if (Names.Count==10)
        {
            InputValue = null;
            inputIsDone = true;
            StateHasChanged();
        }

        StateHasChanged();
        FocusInputAsync();
        // Anropa StateHasChanged för att uppdatera renderingen

    }

    private void RemovePlayer(string name)
    {
        Names.Remove(name);

        // Uppdatera disableDoneBtn baserat på antalet namn
        disableDoneBtn = Names.Count == 0;

        if(Names.Count<10)
        {
            inputIsDone = false; 
        }

        StateHasChanged();
    }

    private void AddActivePlayers()
    {
        PlayerManager.Players.Clear();
        PlayerManager.AddActivePlayers(Names);
        Names.Clear();
        Navigation.NavigateTo("/deck");
    }

    protected override void OnInitialized()
    {
        Names.Clear();
        players = PlayerManager.Players;

        if (players != null)
        {
            foreach (Player p in players)
            {
                Names.Add(p.Name);
            }
        }

        // Sätt disableDoneBtn baserat på om inga spelare är tillagda
        disableDoneBtn = Names.Count == 0;

        // Så att done-button fungerar även om man kommer tillbaka till sidan.
        if (players != null && players.Count >= 1)
        {
            disableDoneBtn = false;
        }
    }


    private async Task FocusInputAsync()
    {
        await Task.Delay(1); // Vänta en kort stund för att säkerställa att rendering är klar
        await playerNameInput.FocusAsync();
    }


    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            AddPlayers();
        }
    }

    private void UpdateInputValue(ChangeEventArgs e)
    {
        InputValue = e.Value?.ToString();
      
    }

}
