@page "/inputPlayerNames"
@using OneMoreDate.Components.Reusable
@using OneMoreDate.Managers
@using OneMoreDate.Models
@inject NavigationManager navigationManager

<Background />
<GoBackBtn BackUrl="menu" />
<div class="outer-playernames-container">
    <div class="modal-playernames-bg rounded p-3">
        <h2 class="mb-2">Player Names:</h2>
        <div class="input-group mb-1">
            <input @bind="InputValue" placeholder="Name" class="form-control" disabled="@inputIsDone" @ref="playerNameInput" />
            <button @onclick="AddPlayers" class="button-color fw-bold">+</button>
        </div>
        @foreach (var name in Names)
        {
            <div class="name-container bg-light">
                <p class="name-p small">
                    @name
                </p>
                <button class="remove-player-btn fw-bolder button-color fs-1 m-1" @onclick="() => RemovePlayer(name)">-</button>
            </div>
        }

        <button @onclick="AddActivePlayers" class="w-100 button-color done-btn rounded" disabled="@disableDoneBtn">Done</button>
    </div>
</div>

@code {
    private List<Player>? players = new List<Player>();

    private bool inputIsDone = false;
    private bool disableDoneBtn = true;
    public string InputValue { get; set; }
    public List<string> Names { get; set; } = new List<string>();
    private ElementReference playerNameInput;

    private void AddPlayers()
    {

        if (!string.IsNullOrEmpty(InputValue))
        {
            Names.Add(InputValue);
            InputValue = "";

        }

        if (Names.Count>=1)
        {
            disableDoneBtn = false;
        }
        if(PlayerManager.Players.Count >=10)
        {
            inputIsDone = true;
            StateHasChanged();

        }

        else
        {
            // Sätt fokus tillbaka till input-elementet efter att en spelare har lagts till
            _ = FocusInputAsync();
        }


    }

    private void RemovePlayer(string name)
    {
        Names.Remove(name);
        if (Names.Count ==10)
        {
            inputIsDone = false;
            disableDoneBtn = true;
        }
        StateHasChanged();
        // Sätt fokus tillbaka till input-elementet efter att en spelare har tagits bort
        _ = FocusInputAsync();
    }

    private void AddActivePlayers()
    {
        PlayerManager.Players.Clear();
        PlayerManager.AddActivePlayers(Names);
        Names.Clear();
        navigationManager.NavigateTo("/deck");
    }

    protected override void OnInitialized()
    {


        Names.Clear();
        players = PlayerManager.Players;
        if (players!= null)
        {
            foreach (Player p in players)
            {
                Names.Add(p.Name);
            }
        }

        // Så att done-button fungerar även om man kommer tillbaka till sidan.
        if (players!= null && players.Count>=1)
        {
            disableDoneBtn = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Sätt fokus på input-elementet när komponenten har renderats för första gången
            await FocusInputAsync();
        }
    }

    private async Task FocusInputAsync()
    {
        await Task.Delay(1); // Vänta en kort stund för att säkerställa att rendering är klar
        await playerNameInput.FocusAsync();
    }
}
